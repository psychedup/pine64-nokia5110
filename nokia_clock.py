#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  nokia_test.py
#  
#  Copyright 2018 Unknown <chris@pinetoo>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
#  

import time
import math
from RPi import GPIO
from RPi import SPI
from PIL import Image
from PIL import ImageDraw
from PIL import ImageFont

DC = 23
RST = 24
LED = 12
SPIDEV = "/dev/spidev0.0"
SPIMODE = 1
SPIDELAY = 0
SPIBPW = 8
SPISPEED = 4000000
LCDCONTRAST = 50

LCDWIDTH = 84
LCDHEIGHT = 48
ROWPIXELS = LCDHEIGHT//6
PCD8544_POWERDOWN = 0x04
PCD8544_ENTRYMODE = 0x02
PCD8544_EXTENDEDINSTRUCTION = 0x01
PCD8544_DISPLAYBLANK = 0x0
PCD8544_DISPLAYNORMAL = 0x4
PCD8544_DISPLAYALLON = 0x1
PCD8544_DISPLAYINVERTED = 0x5
PCD8544_FUNCTIONSET = 0x20
PCD8544_DISPLAYCONTROL = 0x08
PCD8544_SETYADDR = 0x40
PCD8544_SETXADDR = 0x80
PCD8544_SETTEMP = 0x04
PCD8544_SETBIAS = 0x10
PCD8544_SETVOP = 0x80

lcd_buffer = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFC, 0xFE, 0xFF, 0xFC, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80, 0xC0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC7, 0xC7, 0x87, 0x8F, 0x9F, 0x9F, 0xFF, 0xFF, 0xFF, 0xC1, 0xC0, 0xE0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF1, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x0F, 0x0F, 0x87, 0xE7, 0xFF, 0xFF, 0xFF, 0x1F, 0x1F, 0x3F, 0xF9, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7E, 0x3F, 0x3F, 0x0F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0xE0, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x1F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]

def lcd_command( c ):
	"""Send command byte to display """
	# DC pin low signals command byte.
	GPIO.output( DC, GPIO.LOW )
	SPI.write( [ c ] )

def lcd_extended_command( c ):
	"""Send a command in extended mode"""
	# Set extended command mode
	lcd_command( PCD8544_FUNCTIONSET | PCD8544_EXTENDEDINSTRUCTION )
	lcd_command( c )
	# Set normal display mode
	lcd_command( PCD8544_FUNCTIONSET )
	lcd_command( PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL )

def main(args):
	
	# setup
	GPIO.setmode( GPIO.BCM )
	GPIO.setup( DC, GPIO.OUT )
	GPIO.setup( RST, GPIO.OUT )
	GPIO.setup( LED, GPIO.OUT )
	# GPIO.output( LED, GPIO.HIGH )
	
	# SPI.open( SPIDEV, mode = SPIMODE, delay = SPIDELAY, bits_per_word = SPIBPW, speed = SPISPEED )
	SPI.open( SPIDEV, speed = 4000000 )
	
	# initialize device, set contrast
	lcd_reset()
	lcd_extended_command( PCD8544_SETBIAS | 4 ) # set bias
	lcd_set_contrast( LCDCONTRAST )
	
	# Clear display
	lcd_clear()
	lcd_display()
	
	# Create blank image for drawing
	# Make sure to create new image with mode '1' for 1-bit color.
	image = Image.new( '1', ( LCDWIDTH, LCDHEIGHT ) )
	
	# Get drawing object to draw on image.
	draw = ImageDraw.Draw( image )
	
	draw.rectangle( ( 0, 0, LCDWIDTH-1, LCDHEIGHT-1 ), outline = 1, fill = 1 )
		
	while True:
		draw.ellipse( ( 18, 0, 65, 47 ), outline = 0, fill = 0 )
		
		clk_hr = time.localtime().tm_hour
		if clk_hr > 12:
			clk_hr -= 12
		
		clk_min = time.localtime().tm_min
		
		center_x = 42
		center_y = 24
		
		hr_end_x = 10 * math.cos( math.radians( clk_hr * 5 * 6 ) - math.radians( 90 ) ) + center_x
		hr_end_y = 10 * math.sin( math.radians( clk_hr * 5 * 6 ) - math.radians( 90 ) ) + center_y
		
		min_end_x = 15 * math.cos( math.radians( clk_min * 6 ) - math.radians( 90 ) ) + center_x
		min_end_y = 15 * math.sin( math.radians( clk_min * 6 ) - math.radians( 90 ) ) + center_y
		
		draw.line( ( center_x, center_y, hr_end_x, hr_end_y ), 1 )
		draw.line( ( center_x, center_y, min_end_x, min_end_y ), 1 )
		
		lcd_image( image )
		lcd_display()
		
		time.sleep( 60 )
	
	GPIO.cleanup()
	SPI.close()
	return 0

def lcd_reset():
	GPIO.output( RST, GPIO.LOW )
	time.sleep( 0.2 )
	GPIO.output( RST, GPIO.HIGH )
	
def lcd_display():
	"""Write display buffer to physical display."""
	# Reset to position zero
	lcd_command( PCD8544_SETYADDR )
	lcd_command( PCD8544_SETXADDR )
	# Write the buffer
	GPIO.output( DC, GPIO.HIGH )
	for x in range( 6 ):
		SPI.write( lcd_buffer[ x * 84 : x * 84 + 84 ] )

def lcd_image( image ):
	"""Set buffer to value of Python Imaging Library image.  The image should
	be in 1 bit mode and have a size of 84x48 pixels."""
	global lcd_buffer
	if image.mode != '1':
		raise ValueError('Image must be in mode 1.')
	index = 0
	# Iterate through the 6 y axis rows.
	# Grab all the pixels from the image, faster than getpixel.
	pix = image.load()
	for row in range(6):
		# Iterate through all 83 x axis columns.
		for x in range(84):
			# Set the bits for the column of pixels at the current position.
			bits = 0
			# Don't use range here as it's a bit slow
			for bit in [0, 1, 2, 3, 4, 5, 6, 7]:
				bits = bits << 1
				bits |= 1 if pix[(x, row*ROWPIXELS+7-bit)] == 0 else 0
			# Update buffer byte and increment to next byte.
			lcd_buffer[index] = bits
			index += 1
	
def lcd_set_contrast( contrast ):
	"""Set contrast to specified value (should be 0-127)."""
	contrast = max( 0, min( contrast, 0x7f ) ) # Clamp to values 0-0x7f
	lcd_extended_command( PCD8544_SETVOP | contrast )
	
def lcd_clear():
	"""Clear contents of image buffer."""
	global lcd_buffer
	lcd_buffer = [0] * ( LCDWIDTH * LCDHEIGHT // 8 )

if __name__ == '__main__':
    import sys
    sys.exit(main(sys.argv))
