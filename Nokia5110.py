#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Nokia5110.py
#  
#  Copyright 2018 Unknown <chris@pinetoo>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
#  

from RPi import GPIO, SPI
import time

LCDWIDTH = 84
LCDHEIGHT = 48
ROWPIXELS = LCDHEIGHT//6
PCD8544_POWERDOWN = 0x04
PCD8544_ENTRYMODE = 0x02
PCD8544_EXTENDEDINSTRUCTION = 0x01
PCD8544_DISPLAYBLANK = 0x0
PCD8544_DISPLAYNORMAL = 0x4
PCD8544_DISPLAYALLON = 0x1
PCD8544_DISPLAYINVERTED = 0x5
PCD8544_FUNCTIONSET = 0x20
PCD8544_DISPLAYCONTROL = 0x08
PCD8544_SETYADDR = 0x40
PCD8544_SETXADDR = 0x80
PCD8544_SETTEMP = 0x04
PCD8544_SETBIAS = 0x10
PCD8544_SETVOP = 0x80

class Nokia5110( object ):
	"""Nokia 5110 PCD8544-based LCD display."""
	
	def __init__( self, spidev, dc, rst, ledpin, ledbrightness ):
		self._spidev = spidev
		self._dc = dc
		self._rst = rst
		self._ledpin = ledpin
		GPIO.setmode( GPIO.BCM )
		GPIO.setup( self._dc, GPIO.OUT )
		GPIO.setup( self._rst, GPIO.OUT )
		GPIO.setup( self._ledpin, GPIO.OUT )
		# brightness should be between 0.1 and 100
		self._ledbrightness = max( 0.1, min( ledbrightness, 100 ) )
		self._ledpwm = GPIO.PWM( self._ledpin, 100 )
		self._ledpwm.start( self._ledbrightness )
		self._spifd = SPI.open( self._spidev, speed = 4000000 )
		self.extended_command( PCD8544_SETBIAS )
		self._buffer = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFC, 0xFE, 0xFF, 0xFC, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80, 0xC0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC7, 0xC7, 0x87, 0x8F, 0x9F, 0x9F, 0xFF, 0xFF, 0xFF, 0xC1, 0xC0, 0xE0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC, 0xFC, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF1, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x0F, 0x0F, 0x87, 0xE7, 0xFF, 0xFF, 0xFF, 0x1F, 0x1F, 0x3F, 0xF9, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7E, 0x3F, 0x3F, 0x0F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0xE0, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF0, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x1F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x1F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]
		
	def brightness( self, ledbrightness ):
		# brightness should be between 0.1 and 100
		self._ledbrightness = max( 0.1, min( ledbrightness, 100 ) )
		self._ledpwm.ChangeDutyCycle( self._ledbrightness )

	def cleanup( self ):
		GPIO.cleanup()
		_rslt = SPI.close()

	def clear( self ):
		"""Clear the contents of the image buffer."""
		self._buffer = [0] * ( LCDWIDTH * LCDHEIGHT // 8 )

	def command( self, c ):
		"""Send command byte to display """
		# DC pin low signals command byte
		GPIO.output( self._dc, GPIO.LOW )
		_rslt = SPI.write( [ c ] )
	
	def display( self ):
		"""Write display buffer to physical display."""
		# Reset to position zero
		self.command( PCD8544_SETYADDR )
		self.command( PCD8544_SETXADDR )
		# Write the buffer
		GPIO.output( self._dc, GPIO.HIGH )
		for x in range( 6 ):
			_rslt = SPI.write( self._buffer[ x * 84 : x * 84 + 84 ] )
		
	def extended_command( self, c ):
		"""Send a command in extended mode"""
		# Set extended command mode
		self.command( PCD8544_FUNCTIONSET | PCD8544_EXTENDEDINSTRUCTION )
		self.command( c )
		# Set normal display mode
		self.command( PCD8544_FUNCTIONSET )
		self.command( PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL )
	
	def image( self, image ):
		"""Set buffer to value of PIL image. The image should
		be in 1 bit mode and have a size of 84x48 pixels."""
		if image.mode != '1':
			raise ValueError( 'Image must be in mode 1.' )
		index = 0
		# Iterate through the 6 y axis rows.
		# Grab all the pixels from the image, faster than getpixel.
		pix = image.load()
		for row in range( 6 ):
			# Iterate through all 83 x axis columns.
			for x in range( 84) :
				# Set the bits for the column of pixels at the current position.
				bits = 0
				# Don't use range here as it's a bit slow
				for bit in[ 0, 1, 2, 3, 4, 5, 6, 7 ]:
					bits = bits << 1
					bits |= 1 if pix[ ( x, row*ROWPIXELS+7-bit ) ] == 0 else 0
				# Update buffer byte and increment to next byte.
				self._buffer[ index ] = bits
				index += 1
	
	def reset( self ):
		GPIO.output( self._rst, GPIO.LOW )
		time.sleep( 0.2 )
		GPIO.output( self._rst, GPIO.HIGH )
		
	def set_contrast( self, contrast ):
		"""Set contrast to specified value (should be 0-127)."""
		contrast = max( 0, min( contrast, 0x7f ) ) # Clamp to values 0-0x7f
		self.extended_command( PCD8544_SETVOP | contrast )

def main(args):
    return 0

if __name__ == '__main__':
    import sys
    sys.exit(main(sys.argv))
